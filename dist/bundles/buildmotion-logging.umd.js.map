{"version":3,"file":"buildmotion-logging.umd.js","sources":["../severity.enum.js","../logging.service.js","../buildmotion-logging.module.js"],"sourcesContent":["export var Severity;\r\n(function (Severity) {\r\n    Severity[Severity[\"Information\"] = 1] = \"Information\";\r\n    Severity[Severity[\"Warning\"] = 2] = \"Warning\";\r\n    Severity[Severity[\"Error\"] = 3] = \"Error\";\r\n    Severity[Severity[\"Critical\"] = 4] = \"Critical\";\r\n    Severity[Severity[\"Debug\"] = 5] = \"Debug\";\r\n})(Severity || (Severity = {}));\r\n//# sourceMappingURL=severity.enum.js.map","import { Injectable, Optional } from '@angular/core';\r\nimport { loggingServiceConfig } from './logging.service.config';\r\nimport { Severity } from './severity.enum';\r\nvar LoggingService = /** @class */ (function () {\r\n    function LoggingService() {\r\n    }\r\n    /**\r\n     * The [LoggingService] constructor.\r\n     */\r\n    // constructor(\r\n    //     // @Optional() private config: loggingServiceConfig\r\n    //     applicationName: string\r\n    // ) {\r\n    //     this.log(this.serviceName, Severity.Information, `Starting logging service at: ${this.timestamp}`);\r\n    //     if(applicationName) {\r\n    //         this.applicationName = applicationName;\r\n    //     }\r\n    // }\r\n    /**\r\n     * Use this method to send a log message with severity and source information\r\n     * to the application's logger.\r\n     *\r\n     * If the application environment mode is [Production], the information will\r\n     * be sent to a centralized repository.\r\n     *\r\n     * @param source\r\n     * @param severity\r\n     * @param message\r\n     */\r\n    /**\r\n         * The [LoggingService] constructor.\r\n         */\r\n    // constructor(\r\n    //     // @Optional() private config: loggingServiceConfig\r\n    //     applicationName: string\r\n    // ) {\r\n    //     this.log(this.serviceName, Severity.Information, `Starting logging service at: ${this.timestamp}`);\r\n    //     if(applicationName) {\r\n    //         this.applicationName = applicationName;\r\n    //     }\r\n    // }\r\n    /**\r\n         * Use this method to send a log message with severity and source information\r\n         * to the application's logger.\r\n         *\r\n         * If the application environment mode is [Production], the information will\r\n         * be sent to a centralized repository.\r\n         *\r\n         * @param source\r\n         * @param severity\r\n         * @param message\r\n         */\r\n    LoggingService.prototype.log = /**\r\n         * The [LoggingService] constructor.\r\n         */\r\n    // constructor(\r\n    //     // @Optional() private config: loggingServiceConfig\r\n    //     applicationName: string\r\n    // ) {\r\n    //     this.log(this.serviceName, Severity.Information, `Starting logging service at: ${this.timestamp}`);\r\n    //     if(applicationName) {\r\n    //         this.applicationName = applicationName;\r\n    //     }\r\n    // }\r\n    /**\r\n         * Use this method to send a log message with severity and source information\r\n         * to the application's logger.\r\n         *\r\n         * If the application environment mode is [Production], the information will\r\n         * be sent to a centralized repository.\r\n         *\r\n         * @param source\r\n         * @param severity\r\n         * @param message\r\n         */\r\n    function (source, severity, message) {\r\n        this.source = this.applicationName + \".\" + source;\r\n        this.severity = severity;\r\n        this.message = message;\r\n        this.timestamp = new Date();\r\n        var msg = \"\" + this.message;\r\n        console.log(this.severity + \" from \" + this.source + \": \" + msg + \" (\" + this.timestamp + \")\");\r\n    };\r\n    return LoggingService;\r\n}());\r\nexport { LoggingService };\r\n//# sourceMappingURL=logging.service.js.map","import { NgModule, ModuleWithProviders, NO_ERRORS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { loggingServiceConfig } from './logging.service.config';\r\nimport { LoggingService } from './logging.service';\r\nvar BuildMotionLoggingModule = /** @class */ (function () {\r\n    function BuildMotionLoggingModule() {\r\n    }\r\n    BuildMotionLoggingModule.decorators = [\r\n        {\r\n            type: NgModule, args: [{\r\n                imports: [\r\n                    CommonModule\r\n                ],\r\n                declarations: [],\r\n                exports: [],\r\n                schemas: [NO_ERRORS_SCHEMA],\r\n            },]\r\n        },\r\n    ];\r\n    return BuildMotionLoggingModule;\r\n}());\r\nexport { BuildMotionLoggingModule };\r\n//# sourceMappingURL=buildmotion-logging.module.js.map"],"names":["Severity","NgModule","CommonModule","NO_ERRORS_SCHEMA"],"mappings":";;;;;;AACA,CAAC,UAAU,QAAQ,EAAE;IACjB,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;IACtD,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAC9C,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;IAC1C,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;IAChD,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;CAC7C,EAAEA,gBAAQ,KAAKA,gBAAQ,GAAG,EAAE,CAAC,CAAC,CAAC;;ACJhC,IAAI,cAAc,kBAAkB,YAAY;IAC5C,SAAS,cAAc,GAAG;KACzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+CD,cAAc,CAAC,SAAS,CAAC,GAAG;;;;;;;;;;;;;;;;;;;;;;;IAuB5B,UAAU,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE;QACjC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,GAAG,GAAG,GAAG,MAAM,CAAC;QAClD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAC5B,IAAI,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC;KAClG,CAAC;IACF,OAAO,cAAc,CAAC;CACzB,EAAE,CAAC;;AChFJ,IAAI,wBAAwB,kBAAkB,YAAY;IACtD,SAAS,wBAAwB,GAAG;KACnC;IACD,wBAAwB,CAAC,UAAU,GAAG;QAClC;YACI,IAAI,EAAEC,aAAQ,EAAE,IAAI,EAAE,CAAC;gBACnB,OAAO,EAAE;oBACLC,mBAAY;iBACf;gBACD,YAAY,EAAE,EAAE;gBAChB,OAAO,EAAE,EAAE;gBACX,OAAO,EAAE,CAACC,qBAAgB,CAAC;aAC9B,EAAE;SACN;KACJ,CAAC;IACF,OAAO,wBAAwB,CAAC;CACnC,EAAE,CAAC;;;;;;;;;;;;;"}