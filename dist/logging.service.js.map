{"version":3,"sources":["../src/app/logging.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,QAAA,EAAS,MAAO,eAAA,CAAgB;AAErD,OAAO,EAAE,oBAAA,EAAqB,MAAO,0BAAA,CAA2B;AAChE,OAAO,EAAE,QAAA,EAAS,MAAO,iBAAA,CAAkB;AAG3C;IAQI;;OAEG;IACH,wBACa,MAA4B;QAA5B,WAAM,GAAN,MAAM,CAAsB;QAXzC,oBAAe,GAAW,oBAAoB,CAAC;QAC/C,gBAAW,GAAW,gBAAgB,CAAC;QAYnC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,WAAW,EAAE,kCAAgC,IAAI,CAAC,SAAW,CAAC,CAAC;QACnG,EAAE,CAAA,CAAC,MAAM,IAAI,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;QAClD,CAAC;IACL,CAAC;IAED;;;;;;;;;;OAUG;IACH,4BAAG,GAAH,UAAI,MAAc,EAAE,QAAkB,EAAE,OAAe;QACnD,IAAI,CAAC,MAAM,GAAM,IAAI,CAAC,eAAe,SAAI,MAAQ,CAAC;QAClD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAE5B,IAAM,GAAG,GAAG,KAAG,IAAI,CAAC,OAAS,CAAC;QAC9B,OAAO,CAAC,GAAG,CAAI,IAAI,CAAC,QAAQ,cAAS,IAAI,CAAC,MAAM,UAAK,GAAG,UAAK,IAAI,CAAC,SAAS,MAAG,CAAC,CAAC;IACpF,CAAC;IACE,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,oBAAoB,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;KAC/D,EAF6F,CAE7F,CAAC;IACF,qBAAC;CA/CD,AA+CC,IAAA;SA/CY,cAAc","file":"logging.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Optional } from '@angular/core';\r\n\r\nimport { loggingServiceConfig } from './logging.service.config';\r\nimport { Severity } from './severity.enum';\r\n\r\n\r\nexport class LoggingService {\r\n    applicationName: string = 'AngularApplication';\r\n    serviceName: string = 'LoggingService';\r\n    source: string;\r\n    severity: Severity;\r\n    message: string;\r\n    private timestamp: Date;\r\n\r\n    /**\r\n     * The [LoggingService] constructor.\r\n     */\r\n    constructor(\r\n         private config: loggingServiceConfig\r\n    ) {\r\n        this.log(this.serviceName, Severity.Information, `Starting logging service at: ${this.timestamp}`);\r\n        if(config && config.applicationName) {\r\n            this.applicationName = config.applicationName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method to send a log message with severity and source information\r\n     * to the application's logger.\r\n     * \r\n     * If the application environment mode is [Production], the information will\r\n     * be sent to a centralized repository.\r\n     * \r\n     * @param source\r\n     * @param severity\r\n     * @param message\r\n     */\r\n    log(source: string, severity: Severity, message: string) {\r\n        this.source = `${this.applicationName}.${source}`;\r\n        this.severity = severity;\r\n        this.message = message;\r\n        this.timestamp = new Date();\r\n\r\n        const msg = `${this.message}`;\r\n        console.log(`${this.severity} from ${this.source}: ${msg} (${this.timestamp})`);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: loggingServiceConfig, decorators: [{ type: Optional }, ]},\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}